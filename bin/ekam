#!/usr/bin/env node

var fs = require('fs')
var path = require('path')

var program = require('commander')
var debug = require('debug')('ekam')
var _eval = require('eval')

var packageInfo = require('../package.json')
var Builder = require('..')

var defaultBuildfiles = 'build.json build.js'
var defaultBuild = {
	"input": {
		"include": "**/*.js"
	,	"exclude": defaultBuildfiles
	}
,	"output": {
		"path": "../build"
	,	"mode": "0755"
	,	"clean": true
	}
,	"uglify": {
		"mangle": {
			"defines": {
				"DEBUG": [ "name", "false" ]
			}
		}
	,	"squeeze": {
			"make_seqs": true
		,	"dead_code": true
		}
	,	"gen": {
		}
	}
}

program
  .version(packageInfo.version)
  .option(
	  '-b, --build <js or json file>'
	, 'Use the specified build file'
	, path.resolve( defaultBuildfiles[0] )
	)
	.option(
	  '-i, --init'
	, 'Creates default sample build files (' + defaultBuildfiles + ')'
	, null
	)
	.option(
	  '-f, --force'
	, 'Overwrite existing build files'
	, null
	)
  .parse(process.argv)

function done (err, roots) {
	if (err) return console.error(err)
	debug('Builder DONE (%d files).', roots.length)
}

if (program.init) {
	// Indented default config
	var defaultBuildString = JSON.stringify(defaultBuild, null, 2)

	// JSON file, JS file
	var files = defaultBuildfiles.split(' ')
	var filesContent = [defaultBuildString, 'build(' + defaultBuildString + ')']

	if (program.force || !files.every(fs.existsSync)) {

		debug('creating default build files %s', defaultBuildfiles)

		files.forEach(function (file, i) {
			fs.writeFileSync(file, filesContent[i])
		})

	} else {
		done('File(s) exist, use --force to overwrite')
	}

} else if (program.build) {
	var config = program.build
	var configFile = path.resolve( config )
	var configPath = path.dirname(configFile)

	debug('build file: %s -> %s', config, configFile)
	if ( /\.json$/.test(config) ) {
		Builder(
			require(configFile)
		,	configPath
		,	done
		)
	} else {
		var sandbox = require('shelljs')

		sandbox.build = function (data, callback) {
				Builder(
					data
				,	configPath
				,	callback || done
				)
			}
		sandbox.__filename = configFile
		sandbox.__dirname = configPath
		// Hack to pass the modified String.prototype
		sandbox.__StringPrototype = String.prototype

		_eval(
			// Update String
			'for(var k in __StringPrototype)'
		+	'String.prototype[k]=__StringPrototype[k];'
		+	'__StringPrototype=undefined;'
		+	fs.readFileSync(config)
		, config
		, sandbox
		)
	}
}
